var documenterSearchIndex = {"docs":
[{"location":"#PdFiles-Documentation","page":"PdFiles Documentation","title":"PdFiles Documentation","text":"","category":"section"},{"location":"","page":"PdFiles Documentation","title":"PdFiles Documentation","text":"","category":"page"},{"location":"#PdFiles","page":"PdFiles Documentation","title":"PdFiles","text":"","category":"section"},{"location":"","page":"PdFiles Documentation","title":"PdFiles Documentation","text":"Modules = [PdFiles]","category":"page"},{"location":"#PdFiles.PdFiles","page":"PdFiles Documentation","title":"PdFiles.PdFiles","text":"PdFiles\n\nImplementations of a better Filehandles. \n\nIncludes a Read-Only Filehandle,  a better Write-Only Filehandle  as well as Mmap-Filehandles allowing both Reading and writing (but not appending (yet)).\n\nMain Functions: pdopen and @om_str\n\n\n\n\n\n","category":"module"},{"location":"#PdFiles.PD_BUFSIZE","page":"PdFiles Documentation","title":"PdFiles.PD_BUFSIZE","text":"const PD_BUFSIZE = 16 * (1024) * (1024)\n\nDefault size of the read/write-buffer of PdReadFile and PdWriteFile.\n\n\n\n\n\n","category":"constant"},{"location":"#PdFiles.PdFile","page":"PdFiles Documentation","title":"PdFiles.PdFile","text":"abstract type PdFile <: IO end\n\nAbstract Type for my Filehandles, to overwrite some of Julias functions from io.jl that cause allocations.\n\n\n\n\n\n","category":"type"},{"location":"#PdFiles.PdOpenMode","page":"PdFiles Documentation","title":"PdFiles.PdOpenMode","text":"abstract type PdOpenMode end\n\nTypes Implemented by @om_str\n\n\n\n\n\n","category":"type"},{"location":"#PdFiles.PdOpenMode-Tuple{AbstractString}","page":"PdFiles Documentation","title":"PdFiles.PdOpenMode","text":"PdOpenMode(pattern::AbstractString)\n\nConverts the String into its Corresponding Subtype of PdOpenMode. \n\nRecommended Usage of this is with the @om_str macro at parse-time.\n\n\n\n\n\n","category":"method"},{"location":"#PdFiles.PdRawFile","page":"PdFiles Documentation","title":"PdFiles.PdRawFile","text":"struct PdRawFile <: PdFile \n    fd::Cint\nend\n\nRaw Filehandle with no Buffer, that calls the C-Functions for Reading, Writing etc.\n\nUsed in PdReadFile and PdWriteFile.\n\n\n\n\n\n","category":"type"},{"location":"#PdFiles.PdReadFile","page":"PdFiles Documentation","title":"PdFiles.PdReadFile","text":"PdReadFile\n\nBuffered Filehandle for more performant Reading.\n\nOpened via pdopen(filename, om\"r\")\n\n\n\n\n\n","category":"type"},{"location":"#PdFiles.PdWriteFile","page":"PdFiles Documentation","title":"PdFiles.PdWriteFile","text":"PdReadFile\n\nBuffered Filehandle for more performant Reading.\n\nOpened via pdopen(filename, om\"r\")\n\n\n\n\n\n","category":"type"},{"location":"#PdFiles.pdopen","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, om\"r\"[, bufsize::Integer])\n\nÖffne eine Datei gebuffered im Read-Only Modus.\n\n\n\n\n\n","category":"function"},{"location":"#PdFiles.pdopen-2","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, om\"w\"[, bufsize::Integer])\n\nÖffne eine Datei gebuffered im Write-Only Modus.\n\nJe nachdem, ob die Datei bereits existiert, wird sie entweder erstellt, oder auf Länge 0 truncated.\n\n\n\n\n\n","category":"function"},{"location":"#PdFiles.pdopen-Tuple{AbstractString, AbstractString, Vararg{Any}}","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, openmode::AbstractString, args...)\n\nÖffne eine Datei. \n\nWelcher Filehandletyp genutzt wird, wird dynamisch bei Runtime bestimmt. Wenn es bereits bei Compilezeit bekannt ist, in welchem Modus diese Datei geöffnet wird, sollte @om_str genutzt werden.\n\n\n\n\n\n","category":"method"},{"location":"#PdFiles.pdopen-Tuple{AbstractString, PdFiles.MmapReadWrite, Integer}","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, om\"mrw\", fs::Integer)\n\nÖffne eine Datei via Mmap im Read-Write Modus. Wird wie ein Normales Filehandle genutzt, aber im Hintergrund wird Mmap genutzt.\n\nVia fs kann die Dateigröße gesetzt werden. Die Datei wird dann, bevor sie via Mmap geöffnet wird, per ftruncate auf die gewünschte Länge gesetzt.\n\n\n\n\n\n","category":"method"},{"location":"#PdFiles.pdopen-Tuple{AbstractString, PdFiles.MmapReadWrite}","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, om\"mrw\")\n\nÖffne eine Datei via Mmap im Read-Write Modus. Wird wie ein Normales Filehandle genutzt, aber im Hintergrund wird Mmap genutzt.\n\n\n\n\n\n","category":"method"},{"location":"#PdFiles.pdopen-Tuple{AbstractString, PdFiles.MmapRead}","page":"PdFiles Documentation","title":"PdFiles.pdopen","text":"pdopen(file::AbstractString, om\"mr\")\n\nÖffne eine Datei via Mmap im Read-Only Modus. Wird wie ein Normales Filehandle genutzt, aber im Hintergrund wird Mmap genutzt.\n\n\n\n\n\n","category":"method"},{"location":"#PdFiles.@om_str-Tuple{Any}","page":"PdFiles Documentation","title":"PdFiles.@om_str","text":"@om_str \"pattern\"\nom\"pattern\"\n\nFindet bei Parse-Zeit den Gewünschten OpenMode, wodurch bei Compilezeit dann schon das gewünschte Filehandle bekannt ist.\n\n\n\n\n\n","category":"macro"},{"location":"#PdLibc","page":"PdFiles Documentation","title":"PdLibc","text":"","category":"section"},{"location":"","page":"PdFiles Documentation","title":"PdFiles Documentation","text":"Modules = [PdFiles.PdLibc]","category":"page"},{"location":"#PdFiles.PdLibc","page":"PdFiles Documentation","title":"PdFiles.PdLibc","text":"PdLibc\n\nInterface for all the C-Calls and Constants used.\n\nIf a C-Function returns an error-code, Base.systemerror is used to confirm the return code, so the User does not need to do any error-checking themselfs.\n\n\n\n\n\n","category":"module"}]
}
